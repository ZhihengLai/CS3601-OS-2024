{
    "sourceFile": "init_c.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1697704417433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1697704417433,
            "name": "Commit-0",
            "content": "/*\n * Copyright (c) 2023 Institute of Parallel And Distributed Systems (IPADS), Shanghai Jiao Tong University (SJTU)\n * Licensed under the Mulan PSL v2.\n * You can use this software according to the terms and conditions of the Mulan PSL v2.\n * You may obtain a copy of Mulan PSL v2 at:\n *     http://license.coscl.org.cn/MulanPSL2\n * THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR\n * PURPOSE.\n * See the Mulan PSL v2 for more details.\n */\n\n#include \"boot.h\"\n#include \"image.h\"\n#include \"consts.h\"\n\n#include <common/types.h>\n\nchar boot_cpu_stack[PLAT_CPU_NUMBER][INIT_STACK_SIZE] ALIGN(4096);\n\n/*\n * Initialize these varibles in order to make them not in .bss section.\n * So, they will have concrete initial value even on real machine.\n *\n * Non-primary CPUs will spin until they see the secondary_boot_flag becomes\n * non-zero which is set in kernel (see enable_smp_cores).\n *\n * The secondary_boot_flag is initilized as {NOT_BSS, 0, 0, ...}.\n */\n#define NOT_BSS (0xBEEFUL)\nlong secondary_boot_flag[PLAT_CPU_NUMBER] = {NOT_BSS};\nvolatile u64 clear_bss_flag = NOT_BSS;\n\n/* Uart */\nvoid early_uart_init(void);\nvoid uart_send_string(char *);\n\nstatic void wakeup_other_cores(void)\n{\n\tu64 *addr;\n\n\t/*\n\t * Set the entry address for non-primary cores.\n\t * 0xe0, 0xe8, 0xf0 are fixed in the firmware (armstub8.bin).\n\t */\n\t// addr = (u64 *)0xd8;\n\t// *addr = TEXT_OFFSET;\n\taddr = (u64 *)0xe0;\n\t*addr = TEXT_OFFSET;\n\taddr = (u64 *)0xe8;\n\t*addr = TEXT_OFFSET;\n\taddr = (u64 *)0xf0;\n\t*addr = TEXT_OFFSET;\n\n\t/*\n\t * Instruction sev (set event) for waking up other (non-primary) cores\n\t * that executes wfe instruction.\n\t */\n\tasm volatile(\"sev\");\n}\n\nstatic void clear_bss(void)\n{\n\tu64 bss_start_addr;\n\tu64 bss_end_addr;\n\tu64 i;\n\n\tbss_start_addr = (u64)&_bss_start;\n\tbss_end_addr = (u64)&_bss_end;\n\n\tfor (i = bss_start_addr; i < bss_end_addr; ++i)\n\t\t*(char *)i = 0;\n\n\tclear_bss_flag = 0;\n}\n\nvoid init_c(void)\n{\n\t/* Clear the bss area for the kernel image */\n\tclear_bss();\n\n\t/* Initialize UART before enabling MMU. */\n\tearly_uart_init();\n\tuart_send_string(\"boot: init_c\\r\\n\");\n\n\twakeup_other_cores();\n\n\t/* Initialize Kernell Page Table. */\n\tuart_send_string(\"[BOOT] Install kernel page table\\r\\n\");\n\tinit_kernel_pt();\n\n\t/* Enable MMU. */\n\tel1_mmu_activate();\n\tuart_send_string(\"[BOOT] Enable el1 MMU\\r\\n\");\n\n\t/* Call Kernel Main. */\n\tuart_send_string(\"[BOOT] Jump to kernel main\\r\\n\");\n\tstart_kernel(secondary_boot_flag);\n\n\t/* Never reach here */\n}\n\nvoid secondary_init_c(int cpuid)\n{\n\tel1_mmu_activate();\n\tsecondary_cpu_boot(cpuid);\n}\n"
        }
    ]
}